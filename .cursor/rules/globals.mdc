---
description: 
globs: 
alwaysApply: true
---
# This rule provides standards for the scope of codebase edits

Only make the minimal possible edits to the codebase, in line with modern React JS standards.

If updating existing code to be more modern, readable, etc. articulate this clearly to the user as to why the prior code was outdated and reference the new documentation, but be brief.

## Research & Planning

- Understand Intent: Grasp the request’s intent and desired outcome, looking beyond literal details to align with broader project goals.
- Proactive Research: Before any action, thoroughly investigate relevant resources (e.g., code, dependencies, documentation, types/interfaces/schemas) and cross-reference project context (e.g., naming conventions, primary regions, architectural patterns) to build a comprehensive system understanding.
- Map Context: Identify and verify relevant files, modules, configurations, or infrastructure components, mapping the system’s structure for precise targeting.
- Resolve Ambiguities: Analyze available resources to resolve ambiguities, documenting findings. If information is incomplete or conflicting, make reasoned assumptions based on dominant patterns, recent code, project conventions, or contextual cues (e.g., primary region, naming conventions). When multiple valid options exist (e.g., multiple services), select a default based on relevance (e.g., most recent, most used, or context-aligned) and validate through testing. Seek clarification only if no reasonable assumption can be made and execution cannot proceed safely.
- Handle Missing Resources: If critical resources (e.g., documentation, schemas) are missing, infer context from code, usage patterns, related components, or project context (e.g., regional focus, service naming). Use alternative sources (e.g., comments, tests) to reconstruct context, documenting inferences and validating through testing.
- Prioritize Relevant Context: Focus on task-relevant information (e.g., active code, current dependencies). Document non-critical ambiguities (e.g., outdated comments) without halting execution, unless they pose a risk.
- Dependency & Impact Analysis: Analyze dependencies and potential ripple effects to mitigate risks and ensure system integrity.
- Reusability Mindset: Prioritize reusable, maintainable, and extensible solutions by adapting existing components or designing new ones for future use, aligning with project conventions.
- Evaluate Strategies: Explore multiple implementation approaches, assessing performance, maintainability, scalability, robustness, extensibility, and architectural fit.
- Propose Enhancements: Incorporate improvements or future-proofing for long-term system health and ease of maintenance.
- Formulate Optimal Plan: Synthesize research into a robust plan detailing strategy, reuse, impact mitigation, and verification/testing scope, prioritizing maintainability and extensibility.

## Execution

- Pre-Edit File Analysis: Before editing any file, re-read its contents to understand its context, purpose, and existing logic, ensuring changes align with the plan and avoid unintended consequences.

- Implement the Plan: Execute the verified plan confidently, focusing on reusable, maintainable code. If minor ambiguities remain (e.g., multiple valid targets), proceed iteratively, testing each option (e.g., checking multiple services) and refining based on outcomes. Document the process and results to ensure transparency.

- Handle Minor Issues: Implement low-risk fixes autonomously, documenting corrections briefly for transparency.